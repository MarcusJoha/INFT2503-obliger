22 serialization::archive 19 0 0 0 0 67 /Users/marcusjohannessen/Desktop/NTNU/Høst 2022/C++/Obliger/oblig6 73 /Users/marcusjohannessen/Desktop/NTNU/Høst 2022/C++/Obliger/oblig6/build 0 0 325 0 0 0 1 # 1 1 1 2 18446744073709551615 7 include 1 2 1 9 18446744073709551615 1 < 1 10 1 11 18446744073709551615 6 string 1 11 1 17 18446744073709551615 1 > 1 17 1 18 18446744073709551615 1 # 2 1 2 2 18446744073709551615 7 include 2 2 2 9 18446744073709551615 1 < 2 10 2 11 18446744073709551615 8 iostream 2 11 2 19 18446744073709551615 1 > 2 19 2 20 18446744073709551615 1 # 3 1 3 2 18446744073709551615 7 include 3 2 3 9 18446744073709551615 14 "Chessboard.h" 3 10 3 24 18446744073709551615 1 # 4 1 4 2 18446744073709551615 7 include 4 2 4 9 18446744073709551615 15 "pieces/King.h" 4 10 4 25 18446744073709551615 10 ChessBoard 7 1 7 11 0 2 :: 7 11 7 13 0 10 ChessBoard 7 13 7 23 0 1 ( 7 23 7 24 0 1 ) 7 24 7 25 0 1 { 7 26 7 27 18446744073709551615 57 // Initialize the squares stored in 8 columns and 8 rows: 8 9 8 66 18446744073709551615 7 squares 9 9 9 16 1 1 . 9 16 9 17 2 6 resize 9 17 9 23 2 1 ( 9 23 9 24 2 1 8 9 24 9 25 18446744073709551615 1 ) 9 25 9 26 2 1 ; 9 26 9 27 18446744073709551615 3 for 10 9 10 12 18446744073709551615 1 ( 10 13 10 14 18446744073709551615 4 auto 10 14 10 18 18446744073709551615 1 & 10 19 10 20 18446744073709551615 13 square_column 10 20 10 33 3 1 : 10 34 10 35 4 7 squares 10 36 10 43 1 1 ) 10 43 10 44 18446744073709551615 13 square_column 11 13 11 26 3 1 . 11 26 11 27 2 6 resize 11 27 11 33 2 1 ( 11 33 11 34 2 1 8 11 34 11 35 18446744073709551615 1 ) 11 35 11 36 2 1 ; 11 36 11 37 18446744073709551615 1 } 12 1 12 2 18446744073709551615 4 bool 15 1 15 5 18446744073709551615 10 ChessBoard 15 6 15 16 0 2 :: 15 16 15 18 5 10 move_piece 15 18 15 28 5 1 ( 15 28 15 29 5 5 const 15 29 15 34 18446744073709551615 3 std 15 35 15 38 6 2 :: 15 38 15 40 18446744073709551615 6 string 15 40 15 46 7 1 & 15 47 15 48 18446744073709551615 4 from 15 48 15 52 8 1 , 15 52 15 53 5 5 const 15 54 15 59 18446744073709551615 3 std 15 60 15 63 6 2 :: 15 63 15 65 18446744073709551615 6 string 15 65 15 71 7 1 & 15 72 15 73 18446744073709551615 2 to 15 73 15 75 9 1 ) 15 75 15 76 5 1 { 15 77 15 78 18446744073709551615 3 int 16 9 16 12 18446744073709551615 6 from_x 16 13 16 19 10 1 = 16 20 16 21 18446744073709551615 4 from 16 22 16 26 8 1 [ 16 26 16 27 11 1 0 16 27 16 28 18446744073709551615 1 ] 16 28 16 29 11 1 - 16 30 16 31 18446744073709551615 3 'a' 16 32 16 35 18446744073709551615 1 ; 16 35 16 36 18446744073709551615 3 int 17 9 17 12 18446744073709551615 6 from_y 17 13 17 19 12 1 = 17 20 17 21 18446744073709551615 4 stoi 17 22 17 26 13 1 ( 17 26 17 27 13 6 string 17 27 17 33 7 1 ( 17 33 17 34 14 1 ) 17 34 17 35 14 1 + 17 36 17 37 15 4 from 17 38 17 42 8 1 [ 17 42 17 43 11 1 1 17 43 17 44 18446744073709551615 1 ] 17 44 17 45 11 1 ) 17 45 17 46 13 1 - 17 47 17 48 18446744073709551615 1 1 17 49 17 50 18446744073709551615 1 ; 17 50 17 51 18446744073709551615 3 int 18 9 18 12 18446744073709551615 4 to_x 18 13 18 17 16 1 = 18 18 18 19 18446744073709551615 2 to 18 20 18 22 9 1 [ 18 22 18 23 11 1 0 18 23 18 24 18446744073709551615 1 ] 18 24 18 25 11 1 - 18 26 18 27 18446744073709551615 3 'a' 18 28 18 31 18446744073709551615 1 ; 18 31 18 32 18446744073709551615 3 int 19 9 19 12 18446744073709551615 4 to_y 19 13 19 17 17 1 = 19 18 19 19 18446744073709551615 4 stoi 19 20 19 24 13 1 ( 19 24 19 25 13 6 string 19 25 19 31 7 1 ( 19 31 19 32 14 1 ) 19 32 19 33 14 1 + 19 34 19 35 15 2 to 19 36 19 38 9 1 [ 19 38 19 39 11 1 1 19 39 19 40 18446744073709551615 1 ] 19 40 19 41 11 1 ) 19 41 19 42 13 1 - 19 43 19 44 18446744073709551615 1 1 19 45 19 46 18446744073709551615 1 ; 19 46 19 47 18446744073709551615 4 auto 22 9 22 13 18446744073709551615 1 & 22 14 22 15 18446744073709551615 10 piece_from 22 15 22 25 18 1 = 22 26 22 27 18446744073709551615 7 squares 22 28 22 35 1 1 [ 22 35 22 36 19 6 from_x 22 36 22 42 10 1 ] 22 42 22 43 19 1 [ 22 43 22 44 19 6 from_y 22 44 22 50 12 1 ] 22 50 22 51 19 1 ; 22 51 22 52 18446744073709551615 2 if 23 9 23 11 18446744073709551615 1 ( 23 12 23 13 18446744073709551615 10 piece_from 23 13 23 23 18 1 ) 23 23 23 24 18446744073709551615 1 { 23 25 23 26 18446744073709551615 2 if 24 13 24 15 18446744073709551615 1 ( 24 16 24 17 18446744073709551615 10 piece_from 24 17 24 27 18 2 -> 24 27 24 29 20 10 valid_move 24 29 24 39 21 1 ( 24 39 24 40 21 6 from_x 24 40 24 46 10 1 , 24 46 24 47 21 6 from_y 24 48 24 54 12 1 , 24 54 24 55 21 4 to_x 24 56 24 60 16 1 , 24 60 24 61 21 4 to_y 24 62 24 66 17 1 ) 24 66 24 67 21 1 ) 24 67 24 68 18446744073709551615 1 { 24 69 24 70 18446744073709551615 4 cout 25 17 25 21 22 2 << 25 22 25 24 23 10 piece_from 25 25 25 35 18 2 -> 25 35 25 37 20 4 type 25 37 25 41 24 1 ( 25 41 25 42 24 1 ) 25 42 25 43 24 2 << 25 44 25 46 23 18 " is moving from " 25 47 25 65 18446744073709551615 2 << 25 66 25 68 23 4 from 25 69 25 73 8 2 << 25 74 25 76 23 6 " to " 25 77 25 83 18446744073709551615 2 << 25 84 25 86 23 2 to 25 87 25 89 9 2 << 25 90 25 92 25 4 endl 25 93 25 97 26 1 ; 25 97 25 98 18446744073709551615 4 auto 26 17 26 21 18446744073709551615 1 & 26 22 26 23 18446744073709551615 8 piece_to 26 23 26 31 27 1 = 26 32 26 33 18446744073709551615 7 squares 26 34 26 41 1 1 [ 26 41 26 42 19 4 to_x 26 42 26 46 16 1 ] 26 46 26 47 19 1 [ 26 47 26 48 19 4 to_y 26 48 26 52 17 1 ] 26 52 26 53 19 1 ; 26 53 26 54 18446744073709551615 2 if 27 17 27 19 18446744073709551615 1 ( 27 20 27 21 18446744073709551615 8 piece_to 27 21 27 29 27 1 ) 27 29 27 30 18446744073709551615 1 { 27 31 27 32 18446744073709551615 2 if 28 21 28 23 18446744073709551615 1 ( 28 24 28 25 18446744073709551615 10 piece_from 28 25 28 35 18 2 -> 28 35 28 37 20 5 color 28 37 28 42 28 2 != 28 43 28 45 18446744073709551615 8 piece_to 28 46 28 54 27 2 -> 28 54 28 56 20 5 color 28 56 28 61 28 1 ) 28 61 28 62 18446744073709551615 1 { 28 63 28 64 18446744073709551615 4 cout 29 25 29 29 22 2 << 29 30 29 32 23 8 piece_to 29 33 29 41 27 2 -> 29 41 29 43 20 4 type 29 43 29 47 24 1 ( 29 47 29 48 24 1 ) 29 48 29 49 24 2 << 29 50 29 52 23 25 " is being removed from " 29 53 29 78 18446744073709551615 2 << 29 79 29 81 23 2 to 29 82 29 84 9 2 << 29 85 29 87 25 4 endl 29 88 29 92 26 1 ; 29 92 29 93 18446744073709551615 2 if 30 25 30 27 18446744073709551615 1 ( 30 28 30 29 18446744073709551615 4 auto 30 29 30 33 18446744073709551615 4 king 30 34 30 38 29 1 = 30 39 30 40 18446744073709551615 12 dynamic_cast 30 41 30 53 18446744073709551615 1 < 30 53 30 54 18446744073709551615 4 King 30 54 30 58 30 1 * 30 59 30 60 18446744073709551615 1 > 30 60 30 61 18446744073709551615 1 ( 30 61 30 62 18446744073709551615 8 piece_to 30 62 30 70 27 1 . 30 70 30 71 31 3 get 30 71 30 74 31 1 ( 30 74 30 75 31 1 ) 30 75 30 76 31 1 ) 30 76 30 77 18446744073709551615 1 ) 30 77 30 78 18446744073709551615 4 cout 31 29 31 33 22 2 << 31 34 31 36 23 4 king 31 37 31 41 29 2 -> 31 41 31 43 32 12 color_string 31 43 31 55 32 1 ( 31 55 31 56 32 1 ) 31 56 31 57 32 2 << 31 58 31 60 23 16 " lost the game" 31 61 31 77 18446744073709551615 2 << 31 78 31 80 25 4 endl 31 81 31 85 26 1 ; 31 85 31 86 18446744073709551615 1 } 32 21 32 22 18446744073709551615 4 else 32 23 32 27 18446744073709551615 1 { 32 28 32 29 18446744073709551615 76 // piece in the from square has the same color as the piece in the to square 33 25 33 101 18446744073709551615 4 cout 34 25 34 29 22 2 << 34 30 34 32 23 15 "can not move " 34 33 34 48 18446744073709551615 2 << 34 49 34 51 23 10 piece_from 34 52 34 62 18 2 -> 34 62 34 64 20 4 type 34 64 34 68 24 1 ( 34 68 34 69 24 1 ) 34 69 34 70 24 2 << 34 71 34 73 23 8 " from " 34 74 34 82 18446744073709551615 2 << 34 83 34 85 23 4 from 34 86 34 90 8 2 << 34 91 34 93 23 6 " to " 34 94 34 100 18446744073709551615 2 << 34 101 34 103 23 2 to 34 104 34 106 9 2 << 34 107 34 109 25 4 endl 34 110 34 114 26 1 ; 34 114 34 115 18446744073709551615 6 return 35 25 35 31 18446744073709551615 5 false 35 32 35 37 18446744073709551615 1 ; 35 37 35 38 18446744073709551615 1 } 36 21 36 22 18446744073709551615 1 } 37 17 37 18 18446744073709551615 8 piece_to 38 17 38 25 27 1 = 38 26 38 27 33 4 move 38 28 38 32 34 1 ( 38 32 38 33 34 10 piece_from 38 33 38 43 18 1 ) 38 43 38 44 34 1 ; 38 44 38 45 18446744073709551615 6 return 39 17 39 23 18446744073709551615 4 true 39 24 39 28 18446744073709551615 1 ; 39 28 39 29 18446744073709551615 1 } 40 13 40 14 18446744073709551615 4 else 40 15 40 19 18446744073709551615 1 { 40 20 40 21 18446744073709551615 4 cout 41 17 41 21 22 2 << 41 22 41 24 23 15 "can not move " 41 25 41 40 18446744073709551615 2 << 41 41 41 43 23 10 piece_from 41 44 41 54 18 2 -> 41 54 41 56 20 4 type 41 56 41 60 24 1 ( 41 60 41 61 24 1 ) 41 61 41 62 24 2 << 41 63 41 65 23 8 " from " 41 66 41 74 18446744073709551615 2 << 41 75 41 77 23 4 from 41 78 41 82 8 2 << 41 83 41 85 23 6 " to " 41 86 41 92 18446744073709551615 2 << 41 93 41 95 23 2 to 41 96 41 98 9 2 << 41 99 41 101 25 4 endl 41 102 41 106 26 1 ; 41 106 41 107 18446744073709551615 6 return 42 17 42 23 18446744073709551615 5 false 42 24 42 29 18446744073709551615 1 ; 42 29 42 30 18446744073709551615 1 } 43 13 43 14 18446744073709551615 1 } 44 9 44 10 18446744073709551615 4 else 44 11 44 15 18446744073709551615 1 { 44 16 44 17 18446744073709551615 4 cout 45 13 45 17 22 2 << 45 18 45 20 23 14 "no piece at " 45 21 45 35 18446744073709551615 2 << 45 36 45 38 23 4 from 45 39 45 43 8 2 << 45 44 45 46 25 4 endl 45 47 45 51 26 1 ; 45 51 45 52 18446744073709551615 6 return 46 13 46 19 18446744073709551615 5 false 46 20 46 25 18446744073709551615 1 ; 46 25 46 26 18446744073709551615 1 } 47 9 47 10 18446744073709551615 1 } 48 5 48 6 18446744073709551615 0 0 35 0 0 0 4 0 0 1 2 0 10 ChessBoard 6 1 2 0 18 squares:ChessBoard 21 1 2 0 21 resize:vector:__1:std 9 1 2 0 88 10:20:/Users/marcusjohannessen/Desktop/NTNU/Høst 2022/C++/Obliger/oblig6/Chessboard.cpp 21 1 2 0 29 operator*:__wrap_iter:__1:std 21 1 2 0 21 move_piece:ChessBoard 22 1 2 0 3 std 20 1 2 0 14 string:__1:std 10 1 2 0 88 15:48:/Users/marcusjohannessen/Desktop/NTNU/Høst 2022/C++/Obliger/oblig6/Chessboard.cpp 10 1 2 0 88 15:73:/Users/marcusjohannessen/Desktop/NTNU/Høst 2022/C++/Obliger/oblig6/Chessboard.cpp 9 1 2 0 88 16:13:/Users/marcusjohannessen/Desktop/NTNU/Høst 2022/C++/Obliger/oblig6/Chessboard.cpp 21 1 2 0 31 operator[]:basic_string:__1:std 9 1 2 0 88 17:13:/Users/marcusjohannessen/Desktop/NTNU/Høst 2022/C++/Obliger/oblig6/Chessboard.cpp 8 1 2 0 12 stoi:__1:std 24 1 2 0 20 basic_string:__1:std 8 1 2 0 17 operator+:__1:std 9 1 2 0 88 18:13:/Users/marcusjohannessen/Desktop/NTNU/Høst 2022/C++/Obliger/oblig6/Chessboard.cpp 9 1 2 0 88 19:13:/Users/marcusjohannessen/Desktop/NTNU/Høst 2022/C++/Obliger/oblig6/Chessboard.cpp 9 1 2 0 88 22:15:/Users/marcusjohannessen/Desktop/NTNU/Høst 2022/C++/Obliger/oblig6/Chessboard.cpp 21 1 2 0 25 operator[]:vector:__1:std 21 1 2 0 29 operator->:unique_ptr:__1:std 21 1 2 0 16 valid_move:Piece 9 1 2 0 12 cout:__1:std 8 1 2 0 16 operator:__1:std 21 1 2 0 10 type:Piece 21 1 2 0 30 operator:basic_ostream:__1:std 8 1 2 0 12 endl:__1:std 9 1 2 0 88 26:23:/Users/marcusjohannessen/Desktop/NTNU/Høst 2022/C++/Obliger/oblig6/Chessboard.cpp 6 1 2 0 11 color:Piece 9 1 2 0 88 30:34:/Users/marcusjohannessen/Desktop/NTNU/Høst 2022/C++/Obliger/oblig6/Chessboard.cpp 4 1 2 0 4 King 21 1 2 0 22 get:unique_ptr:__1:std 21 1 2 0 18 color_string:Piece 21 1 2 0 28 operator=:unique_ptr:__1:std 8 1 2 0 12 move:__1:std 0 0 4 0 0 0 82 /Users/marcusjohannessen/Desktop/NTNU/Høst 2022/C++/Obliger/oblig6/Chessboard.cpp 1665081829 80 /Users/marcusjohannessen/Desktop/NTNU/Høst 2022/C++/Obliger/oblig6/Chessboard.h 1665081805 81 /Users/marcusjohannessen/Desktop/NTNU/Høst 2022/C++/Obliger/oblig6/pieces/King.h 1665079319 82 /Users/marcusjohannessen/Desktop/NTNU/Høst 2022/C++/Obliger/oblig6/pieces/Piece.h 1665079792