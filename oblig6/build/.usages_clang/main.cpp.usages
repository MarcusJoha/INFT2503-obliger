22 serialization::archive 19 0 0 0 0 67 /Users/marcusjohannessen/Desktop/NTNU/Høst 2022/C++/Obliger/oblig6 73 /Users/marcusjohannessen/Desktop/NTNU/Høst 2022/C++/Obliger/oblig6/build 0 0 1162 0 0 0 1 # 1 1 1 2 18446744073709551615 7 include 1 2 1 9 18446744073709551615 1 < 1 10 1 11 18446744073709551615 8 iostream 1 11 1 19 18446744073709551615 1 > 1 19 1 20 18446744073709551615 1 # 2 1 2 2 18446744073709551615 7 include 2 2 2 9 18446744073709551615 1 < 2 10 2 11 18446744073709551615 6 memory 2 11 2 17 18446744073709551615 1 > 2 17 2 18 18446744073709551615 1 # 3 1 3 2 18446744073709551615 7 include 3 2 3 9 18446744073709551615 1 < 3 10 3 11 18446744073709551615 6 string 3 11 3 17 18446744073709551615 1 > 3 17 3 18 18446744073709551615 1 # 4 1 4 2 18446744073709551615 7 include 4 2 4 9 18446744073709551615 1 < 4 10 4 11 18446744073709551615 6 vector 4 11 4 17 18446744073709551615 1 > 4 17 4 18 18446744073709551615 5 using 6 1 6 6 18446744073709551615 9 namespace 6 7 6 16 18446744073709551615 3 std 6 17 6 20 0 1 ; 6 20 6 21 18446744073709551615 5 class 8 1 8 6 18446744073709551615 10 ChessBoard 8 7 8 17 1 1 { 8 18 8 19 18446744073709551615 6 public 9 1 9 7 18446744073709551615 1 : 9 7 9 8 18446744073709551615 4 enum 10 5 10 9 18446744073709551615 5 class 10 10 10 15 18446744073709551615 5 Color 10 16 10 21 2 1 { 10 22 10 23 18446744073709551615 5 WHITE 10 24 10 29 3 1 , 10 29 10 30 18446744073709551615 5 BLACK 11 9 11 14 4 1 } 11 15 11 16 18446744073709551615 1 ; 11 16 11 17 18446744073709551615 5 class 13 5 13 10 18446744073709551615 5 Piece 13 11 13 16 5 1 { 13 17 13 18 18446744073709551615 6 public 14 5 14 11 18446744073709551615 1 : 14 11 14 12 18446744073709551615 5 Piece 15 9 15 14 5 1 ( 15 14 15 15 5 5 Color 15 15 15 20 2 5 color 15 21 15 26 6 1 ) 15 26 15 27 5 1 : 15 28 15 29 5 5 color 15 30 15 35 7 1 ( 15 35 15 36 5 5 color 15 36 15 41 6 1 ) 15 41 15 42 5 1 { 15 43 15 44 18446744073709551615 1 } 15 44 15 45 18446744073709551615 7 virtual 16 9 16 16 18446744073709551615 1 ~ 16 17 16 18 18446744073709551615 5 Piece 16 18 16 23 5 1 ( 16 23 16 24 18446744073709551615 1 ) 16 24 16 25 18446744073709551615 1 { 16 26 16 27 18446744073709551615 1 } 16 27 16 28 18446744073709551615 5 Color 18 9 18 14 2 5 color 18 15 18 20 7 1 ; 18 20 18 21 18446744073709551615 3 std 19 9 19 12 0 2 :: 19 12 19 14 8 6 string 19 14 19 20 9 12 color_string 19 21 19 33 8 1 ( 19 33 19 34 8 1 ) 19 34 19 35 8 5 const 19 36 19 41 18446744073709551615 1 { 19 42 19 43 18446744073709551615 2 if 20 13 20 15 18446744073709551615 1 ( 20 16 20 17 18446744073709551615 5 color 20 17 20 22 7 2 == 20 23 20 25 18446744073709551615 5 Color 20 26 20 31 2 2 :: 20 31 20 33 18446744073709551615 5 WHITE 20 33 20 38 3 1 ) 20 38 20 39 18446744073709551615 6 return 21 17 21 23 18446744073709551615 7 "white" 21 24 21 31 18446744073709551615 1 ; 21 31 21 32 18446744073709551615 4 else 22 13 22 17 18446744073709551615 6 return 23 17 23 23 18446744073709551615 7 "black" 23 24 23 31 18446744073709551615 1 ; 23 31 23 32 18446744073709551615 1 } 24 9 24 10 18446744073709551615 44 /// Return color and type of the chess piece 26 9 26 53 18446744073709551615 7 virtual 27 9 27 16 18446744073709551615 3 std 27 17 27 20 0 2 :: 27 20 27 22 10 6 string 27 22 27 28 9 4 type 27 29 27 33 10 1 ( 27 33 27 34 10 1 ) 27 34 27 35 10 5 const 27 36 27 41 18446744073709551615 1 = 27 42 27 43 10 1 0 27 44 27 45 18446744073709551615 1 ; 27 45 27 46 18446744073709551615 55 /// Returns true if the given chess piece move is valid 29 9 29 64 18446744073709551615 7 virtual 30 9 30 16 18446744073709551615 4 bool 30 17 30 21 18446744073709551615 10 valid_move 30 22 30 32 11 1 ( 30 32 30 33 11 3 int 30 33 30 36 18446744073709551615 6 from_x 30 37 30 43 12 1 , 30 43 30 44 11 3 int 30 45 30 48 18446744073709551615 6 from_y 30 49 30 55 13 1 , 30 55 30 56 11 3 int 30 57 30 60 18446744073709551615 4 to_x 30 61 30 65 14 1 , 30 65 30 66 11 3 int 30 67 30 70 18446744073709551615 4 to_y 30 71 30 75 15 1 ) 30 75 30 76 11 5 const 30 77 30 82 18446744073709551615 1 = 30 83 30 84 11 1 0 30 85 30 86 18446744073709551615 1 ; 30 86 30 87 18446744073709551615 7 virtual 32 9 32 16 18446744073709551615 6 string 32 17 32 23 9 9 text_desc 32 24 32 33 16 1 ( 32 33 32 34 16 1 ) 32 34 32 35 16 5 const 32 36 32 41 18446744073709551615 1 = 32 42 32 43 16 1 0 32 44 32 45 18446744073709551615 1 ; 32 45 32 46 18446744073709551615 1 } 33 5 33 6 18446744073709551615 1 ; 33 6 33 7 18446744073709551615 5 class 35 5 35 10 18446744073709551615 4 King 35 11 35 15 17 1 : 35 16 35 17 18446744073709551615 6 public 35 18 35 24 18446744073709551615 5 Piece 35 25 35 30 5 1 { 35 31 35 32 18446744073709551615 26 // missing implementations 36 9 36 35 18446744073709551615 6 public 37 9 37 15 18446744073709551615 1 : 37 15 37 16 18446744073709551615 4 King 38 13 38 17 17 1 ( 38 17 38 18 17 5 Color 38 18 38 23 2 6 color_ 38 24 38 30 18 1 ) 38 30 38 31 17 1 : 38 32 38 33 17 5 Piece 38 34 38 39 5 1 ( 38 39 38 40 5 6 color_ 38 40 38 46 18 1 ) 38 46 38 47 5 1 { 38 48 38 49 18446744073709551615 1 } 38 49 38 50 18446744073709551615 6 string 39 13 39 19 9 4 type 39 20 39 24 10 1 ( 39 24 39 25 10 1 ) 39 25 39 26 10 5 const 39 27 39 32 18446744073709551615 1 { 39 33 39 34 18446744073709551615 6 string 40 13 40 19 9 9 color_str 40 20 40 29 19 1 = 40 30 40 31 18446744073709551615 1 ( 40 32 40 33 18446744073709551615 5 color 40 33 40 38 7 2 == 40 39 40 41 18446744073709551615 5 Color 40 42 40 47 2 2 :: 40 47 40 49 18446744073709551615 5 WHITE 40 49 40 54 3 1 ) 40 54 40 55 18446744073709551615 1 ? 40 56 40 57 18446744073709551615 7 "white" 40 58 40 65 18446744073709551615 1 : 40 66 40 67 18446744073709551615 7 "black" 40 68 40 75 18446744073709551615 1 ; 40 75 40 76 18446744073709551615 6 return 41 13 41 19 18446744073709551615 9 color_str 41 20 41 29 19 1 + 41 30 41 31 20 7 " King" 41 32 41 39 18446744073709551615 1 ; 41 39 41 40 18446744073709551615 1 } 42 13 42 14 18446744073709551615 4 bool 44 13 44 17 18446744073709551615 10 valid_move 44 18 44 28 11 1 ( 44 29 44 30 11 3 int 44 30 44 33 18446744073709551615 6 x_from 44 34 44 40 21 1 , 44 40 44 41 11 3 int 44 42 44 45 18446744073709551615 6 y_from 44 46 44 52 22 1 , 44 52 44 53 11 3 int 44 54 44 57 18446744073709551615 4 x_to 44 58 44 62 23 1 , 44 62 44 63 11 3 int 44 64 44 67 18446744073709551615 4 y_to 44 68 44 72 24 1 ) 44 73 44 74 11 5 const 44 75 44 80 18446744073709551615 1 { 44 81 44 82 18446744073709551615 3 int 45 17 45 20 18446744073709551615 12 abs_x_change 45 21 45 33 25 1 = 45 34 45 35 18446744073709551615 3 abs 45 36 45 39 26 1 ( 45 39 45 40 26 6 x_from 45 40 45 46 21 1 - 45 47 45 48 18446744073709551615 4 x_to 45 49 45 53 23 1 ) 45 53 45 54 26 1 ; 45 54 45 55 18446744073709551615 3 int 46 17 46 20 18446744073709551615 12 abs_y_change 46 21 46 33 27 1 = 46 34 46 35 18446744073709551615 3 abs 46 36 46 39 26 1 ( 46 39 46 40 26 6 y_from 46 40 46 46 22 1 - 46 47 46 48 18446744073709551615 4 y_to 46 49 46 53 24 1 ) 46 53 46 54 26 1 ; 46 54 46 55 18446744073709551615 2 if 47 17 47 19 18446744073709551615 1 ( 47 20 47 21 18446744073709551615 1 ( 47 21 47 22 18446744073709551615 12 abs_x_change 47 22 47 34 25 2 == 47 35 47 37 18446744073709551615 1 1 47 38 47 39 18446744073709551615 2 && 47 40 47 42 18446744073709551615 12 abs_x_change 47 43 47 55 25 1 < 47 56 47 57 18446744073709551615 1 2 47 58 47 59 18446744073709551615 1 ) 47 59 47 60 18446744073709551615 2 || 47 61 47 63 18446744073709551615 1 ( 47 64 47 65 18446744073709551615 12 abs_y_change 47 65 47 77 27 2 == 47 78 47 80 18446744073709551615 1 1 47 81 47 82 18446744073709551615 2 || 47 83 47 85 18446744073709551615 12 abs_y_change 47 86 47 98 27 1 < 47 99 47 100 18446744073709551615 1 2 47 101 47 102 18446744073709551615 1 ) 47 102 47 103 18446744073709551615 1 ) 47 103 47 104 18446744073709551615 1 { 47 105 47 106 18446744073709551615 6 return 48 21 48 27 18446744073709551615 4 true 48 28 48 32 18446744073709551615 1 ; 48 32 48 33 18446744073709551615 1 } 49 17 49 18 18446744073709551615 6 return 50 17 50 23 18446744073709551615 5 false 50 24 50 29 18446744073709551615 1 ; 50 29 50 30 18446744073709551615 1 } 51 13 51 14 18446744073709551615 6 string 53 13 53 19 9 9 text_desc 53 20 53 29 16 1 ( 53 29 53 30 16 1 ) 53 30 53 31 16 5 const 53 32 53 37 18446744073709551615 1 { 53 37 53 38 18446744073709551615 6 return 54 16 54 22 18446744073709551615 1 ( 54 23 54 24 18446744073709551615 5 color 54 24 54 29 7 2 == 54 30 54 32 18446744073709551615 5 Color 54 33 54 38 2 2 :: 54 38 54 40 18446744073709551615 5 WHITE 54 40 54 45 3 1 ) 54 45 54 46 18446744073709551615 1 ? 54 47 54 48 18446744073709551615 3 "K" 54 49 54 52 18446744073709551615 1 : 54 53 54 54 18446744073709551615 3 "K" 54 56 54 59 18446744073709551615 1 ; 54 59 54 60 18446744073709551615 1 } 55 15 55 16 18446744073709551615 1 ; 55 16 55 17 18446744073709551615 1 } 56 5 56 6 18446744073709551615 1 ; 56 6 56 7 18446744073709551615 5 class 58 5 58 10 18446744073709551615 6 Knight 58 11 58 17 28 1 : 58 18 58 19 18446744073709551615 6 public 58 20 58 26 18446744073709551615 5 Piece 58 27 58 32 5 1 { 58 33 58 34 18446744073709551615 26 // missing implementations 59 9 59 35 18446744073709551615 6 public 60 9 60 15 18446744073709551615 1 : 60 15 60 16 18446744073709551615 6 Knight 61 13 61 19 28 1 ( 61 19 61 20 28 5 Color 61 20 61 25 2 6 color_ 61 26 61 32 29 1 ) 61 32 61 33 28 1 : 61 34 61 35 28 5 Piece 61 36 61 41 5 1 ( 61 41 61 42 5 6 color_ 61 42 61 48 29 1 ) 61 48 61 49 5 1 { 61 50 61 51 18446744073709551615 1 } 61 51 61 52 18446744073709551615 6 string 63 13 63 19 9 4 type 63 20 63 24 10 1 ( 63 24 63 25 10 1 ) 63 25 63 26 10 5 const 63 27 63 32 18446744073709551615 1 { 63 33 63 34 18446744073709551615 6 string 64 13 64 19 9 9 color_str 64 20 64 29 30 1 = 64 30 64 31 18446744073709551615 1 ( 64 32 64 33 18446744073709551615 5 color 64 33 64 38 7 2 == 64 39 64 41 18446744073709551615 5 Color 64 42 64 47 2 2 :: 64 47 64 49 18446744073709551615 5 WHITE 64 49 64 54 3 1 ) 64 54 64 55 18446744073709551615 1 ? 64 56 64 57 18446744073709551615 7 "white" 64 58 64 65 18446744073709551615 1 : 64 66 64 67 18446744073709551615 7 "black" 64 68 64 75 18446744073709551615 1 ; 64 75 64 76 18446744073709551615 6 return 65 13 65 19 18446744073709551615 9 color_str 65 20 65 29 30 1 + 65 30 65 31 20 7 " King" 65 32 65 39 18446744073709551615 1 ; 65 39 65 40 18446744073709551615 1 } 66 13 66 14 18446744073709551615 4 bool 68 13 68 17 18446744073709551615 10 valid_move 68 18 68 28 11 1 ( 68 29 68 30 11 3 int 68 30 68 33 18446744073709551615 6 x_from 68 34 68 40 31 1 , 68 40 68 41 11 3 int 68 42 68 45 18446744073709551615 6 y_from 68 46 68 52 32 1 , 68 52 68 53 11 3 int 68 54 68 57 18446744073709551615 4 x_to 68 58 68 62 33 1 , 68 62 68 63 11 3 int 68 64 68 67 18446744073709551615 4 y_to 68 68 68 72 34 1 ) 68 73 68 74 11 5 const 68 75 68 80 18446744073709551615 1 { 68 81 68 82 18446744073709551615 3 int 69 17 69 20 18446744073709551615 12 abs_x_change 69 21 69 33 35 1 = 69 34 69 35 18446744073709551615 3 abs 69 36 69 39 26 1 ( 69 39 69 40 26 6 x_from 69 40 69 46 31 1 - 69 47 69 48 18446744073709551615 4 x_to 69 49 69 53 33 1 ) 69 53 69 54 26 1 ; 69 54 69 55 18446744073709551615 3 int 70 17 70 20 18446744073709551615 12 abs_y_change 70 21 70 33 36 1 = 70 34 70 35 18446744073709551615 3 abs 70 36 70 39 26 1 ( 70 39 70 40 26 6 y_from 70 40 70 46 32 1 - 70 47 70 48 18446744073709551615 4 y_to 70 49 70 53 34 1 ) 70 53 70 54 26 1 ; 70 54 70 55 18446744073709551615 2 if 72 17 72 19 18446744073709551615 1 ( 72 20 72 21 18446744073709551615 12 abs_x_change 72 21 72 33 35 2 == 72 34 72 36 18446744073709551615 1 1 72 37 72 38 18446744073709551615 2 && 72 39 72 41 18446744073709551615 12 abs_y_change 72 42 72 54 36 2 == 72 55 72 57 18446744073709551615 1 2 72 58 72 59 18446744073709551615 1 ) 72 59 72 60 18446744073709551615 6 return 72 61 72 67 18446744073709551615 4 true 72 68 72 72 18446744073709551615 1 ; 72 72 72 73 18446744073709551615 2 if 73 17 73 19 18446744073709551615 1 ( 73 20 73 21 18446744073709551615 12 abs_x_change 73 21 73 33 35 2 == 73 34 73 36 18446744073709551615 1 2 73 37 73 38 18446744073709551615 2 && 73 39 73 41 18446744073709551615 12 abs_y_change 73 42 73 54 36 2 == 73 55 73 57 18446744073709551615 1 1 73 58 73 59 18446744073709551615 1 ) 73 59 73 60 18446744073709551615 6 return 73 61 73 67 18446744073709551615 4 true 73 68 73 72 18446744073709551615 1 ; 73 72 73 73 18446744073709551615 6 return 75 17 75 23 18446744073709551615 5 false 75 24 75 29 18446744073709551615 1 ; 75 29 75 30 18446744073709551615 1 } 76 13 76 14 18446744073709551615 6 string 78 13 78 19 9 9 text_desc 78 20 78 29 16 1 ( 78 29 78 30 16 1 ) 78 30 78 31 16 5 const 78 32 78 37 18446744073709551615 1 { 78 38 78 39 18446744073709551615 6 return 79 17 79 23 18446744073709551615 1 ( 79 24 79 25 18446744073709551615 5 color 79 25 79 30 7 2 == 79 31 79 33 18446744073709551615 5 Color 79 34 79 39 2 2 :: 79 39 79 41 18446744073709551615 5 WHITE 79 41 79 46 3 1 ) 79 46 79 47 18446744073709551615 1 ? 79 48 79 49 18446744073709551615 3 "N" 79 50 79 53 18446744073709551615 1 : 79 54 79 55 18446744073709551615 3 "N" 79 56 79 59 18446744073709551615 1 ; 79 59 79 60 18446744073709551615 1 } 80 13 80 14 18446744073709551615 1 } 81 5 81 6 18446744073709551615 1 ; 81 6 81 7 18446744073709551615 10 ChessBoard 83 5 83 15 1 1 ( 83 15 83 16 1 1 ) 83 16 83 17 1 1 { 83 18 83 19 18446744073709551615 57 // Initialize the squares stored in 8 columns and 8 rows: 84 9 84 66 18446744073709551615 7 squares 85 9 85 16 37 1 . 85 16 85 17 38 6 resize 85 17 85 23 38 1 ( 85 23 85 24 38 1 8 85 24 85 25 18446744073709551615 1 ) 85 25 85 26 38 1 ; 85 26 85 27 18446744073709551615 3 for 86 9 86 12 18446744073709551615 1 ( 86 13 86 14 18446744073709551615 4 auto 86 14 86 18 18446744073709551615 1 & 86 19 86 20 18446744073709551615 13 square_column 86 20 86 33 39 1 : 86 34 86 35 40 7 squares 86 36 86 43 37 1 ) 86 43 86 44 18446744073709551615 13 square_column 87 13 87 26 39 1 . 87 26 87 27 38 6 resize 87 27 87 33 38 1 ( 87 33 87 34 38 1 8 87 34 87 35 18446744073709551615 1 ) 87 35 87 36 38 1 ; 87 36 87 37 18446744073709551615 1 } 88 5 88 6 18446744073709551615 47 /// 8x8 squares occupied by 1 or 0 chess pieces 90 5 90 52 18446744073709551615 6 vector 91 5 91 11 41 1 < 91 11 91 12 18446744073709551615 6 vector 91 12 91 18 41 1 < 91 18 91 19 18446744073709551615 10 unique_ptr 91 19 91 29 42 1 < 91 29 91 30 18446744073709551615 5 Piece 91 30 91 35 5 2 >> 91 35 91 37 18446744073709551615 1 > 91 37 91 38 18446744073709551615 7 squares 91 39 91 46 37 1 ; 91 46 91 47 18446744073709551615 45 /// Move a chess piece if it is a valid move. 93 5 93 50 18446744073709551615 41 /// Does not test for check or checkmate. 94 5 94 46 18446744073709551615 4 bool 95 5 95 9 18446744073709551615 10 move_piece 95 10 95 20 43 1 ( 95 20 95 21 43 5 const 95 21 95 26 18446744073709551615 3 std 95 27 95 30 0 2 :: 95 30 95 32 18446744073709551615 6 string 95 32 95 38 9 1 & 95 39 95 40 18446744073709551615 4 from 95 40 95 44 44 1 , 95 44 95 45 43 5 const 95 46 95 51 18446744073709551615 3 std 95 52 95 55 0 2 :: 95 55 95 57 18446744073709551615 6 string 95 57 95 63 9 1 & 95 64 95 65 18446744073709551615 2 to 95 65 95 67 45 1 ) 95 67 95 68 43 1 { 95 69 95 70 18446744073709551615 3 int 96 9 96 12 18446744073709551615 6 from_x 96 13 96 19 46 1 = 96 20 96 21 18446744073709551615 4 from 96 22 96 26 44 1 [ 96 26 96 27 47 1 0 96 27 96 28 18446744073709551615 1 ] 96 28 96 29 47 1 - 96 30 96 31 18446744073709551615 3 'a' 96 32 96 35 18446744073709551615 1 ; 96 35 96 36 18446744073709551615 3 int 97 9 97 12 18446744073709551615 6 from_y 97 13 97 19 48 1 = 97 20 97 21 18446744073709551615 4 stoi 97 22 97 26 49 1 ( 97 26 97 27 49 6 string 97 27 97 33 9 1 ( 97 33 97 34 50 1 ) 97 34 97 35 50 1 + 97 36 97 37 20 4 from 97 38 97 42 44 1 [ 97 42 97 43 47 1 1 97 43 97 44 18446744073709551615 1 ] 97 44 97 45 47 1 ) 97 45 97 46 49 1 - 97 47 97 48 18446744073709551615 1 1 97 49 97 50 18446744073709551615 1 ; 97 50 97 51 18446744073709551615 3 int 98 9 98 12 18446744073709551615 4 to_x 98 13 98 17 51 1 = 98 18 98 19 18446744073709551615 2 to 98 20 98 22 45 1 [ 98 22 98 23 47 1 0 98 23 98 24 18446744073709551615 1 ] 98 24 98 25 47 1 - 98 26 98 27 18446744073709551615 3 'a' 98 28 98 31 18446744073709551615 1 ; 98 31 98 32 18446744073709551615 3 int 99 9 99 12 18446744073709551615 4 to_y 99 13 99 17 52 1 = 99 18 99 19 18446744073709551615 4 stoi 99 20 99 24 49 1 ( 99 24 99 25 49 6 string 99 25 99 31 9 1 ( 99 31 99 32 50 1 ) 99 32 99 33 50 1 + 99 34 99 35 20 2 to 99 36 99 38 45 1 [ 99 38 99 39 47 1 1 99 39 99 40 18446744073709551615 1 ] 99 40 99 41 47 1 ) 99 41 99 42 49 1 - 99 43 99 44 18446744073709551615 1 1 99 45 99 46 18446744073709551615 1 ; 99 46 99 47 18446744073709551615 4 auto 103 9 103 13 18446744073709551615 1 & 103 14 103 15 18446744073709551615 10 piece_from 103 15 103 25 53 1 = 103 26 103 27 18446744073709551615 7 squares 103 28 103 35 37 1 [ 103 35 103 36 54 6 from_x 103 36 103 42 46 1 ] 103 42 103 43 54 1 [ 103 43 103 44 54 6 from_y 103 44 103 50 48 1 ] 103 50 103 51 54 1 ; 103 51 103 52 18446744073709551615 2 if 104 9 104 11 18446744073709551615 1 ( 104 12 104 13 18446744073709551615 10 piece_from 104 13 104 23 53 1 ) 104 23 104 24 18446744073709551615 1 { 104 25 104 26 18446744073709551615 2 if 105 13 105 15 18446744073709551615 1 ( 105 16 105 17 18446744073709551615 10 piece_from 105 17 105 27 53 2 -> 105 27 105 29 55 10 valid_move 105 29 105 39 11 1 ( 105 39 105 40 11 6 from_x 105 40 105 46 46 1 , 105 46 105 47 11 6 from_y 105 48 105 54 48 1 , 105 54 105 55 11 4 to_x 105 56 105 60 51 1 , 105 60 105 61 11 4 to_y 105 62 105 66 52 1 ) 105 66 105 67 11 1 ) 105 67 105 68 18446744073709551615 1 { 105 69 105 70 18446744073709551615 4 cout 106 17 106 21 56 2 << 106 22 106 24 57 10 piece_from 106 25 106 35 53 2 -> 106 35 106 37 55 4 type 106 37 106 41 10 1 ( 106 41 106 42 10 1 ) 106 42 106 43 10 2 << 106 44 106 46 57 18 " is moving from " 106 47 106 65 18446744073709551615 2 << 106 66 106 68 57 4 from 106 69 106 73 44 2 << 106 74 106 76 57 6 " to " 106 77 106 83 18446744073709551615 2 << 106 84 106 86 57 2 to 106 87 106 89 45 2 << 106 90 106 92 58 4 endl 106 93 106 97 59 1 ; 106 97 106 98 18446744073709551615 4 auto 107 17 107 21 18446744073709551615 1 & 107 22 107 23 18446744073709551615 8 piece_to 107 23 107 31 60 1 = 107 32 107 33 18446744073709551615 7 squares 107 34 107 41 37 1 [ 107 41 107 42 54 4 to_x 107 42 107 46 51 1 ] 107 46 107 47 54 1 [ 107 47 107 48 54 4 to_y 107 48 107 52 52 1 ] 107 52 107 53 54 1 ; 107 53 107 54 18446744073709551615 2 if 108 17 108 19 18446744073709551615 1 ( 108 20 108 21 18446744073709551615 8 piece_to 108 21 108 29 60 1 ) 108 29 108 30 18446744073709551615 1 { 108 31 108 32 18446744073709551615 2 if 109 21 109 23 18446744073709551615 1 ( 109 24 109 25 18446744073709551615 10 piece_from 109 25 109 35 53 2 -> 109 35 109 37 55 5 color 109 37 109 42 7 2 != 109 43 109 45 18446744073709551615 8 piece_to 109 46 109 54 60 2 -> 109 54 109 56 55 5 color 109 56 109 61 7 1 ) 109 61 109 62 18446744073709551615 1 { 109 63 109 64 18446744073709551615 4 cout 110 25 110 29 56 2 << 110 30 110 32 57 8 piece_to 110 33 110 41 60 2 -> 110 41 110 43 55 4 type 110 43 110 47 10 1 ( 110 47 110 48 10 1 ) 110 48 110 49 10 2 << 110 50 110 52 57 25 " is being removed from " 110 53 110 78 18446744073709551615 2 << 110 79 110 81 57 2 to 110 82 110 84 45 2 << 110 85 110 87 58 4 endl 110 88 110 92 59 1 ; 110 92 110 93 18446744073709551615 2 if 111 25 111 27 18446744073709551615 1 ( 111 28 111 29 18446744073709551615 4 auto 111 29 111 33 18446744073709551615 4 king 111 34 111 38 61 1 = 111 39 111 40 18446744073709551615 12 dynamic_cast 111 41 111 53 18446744073709551615 1 < 111 53 111 54 18446744073709551615 4 King 111 54 111 58 17 1 * 111 59 111 60 18446744073709551615 1 > 111 60 111 61 18446744073709551615 1 ( 111 61 111 62 18446744073709551615 8 piece_to 111 62 111 70 60 1 . 111 70 111 71 62 3 get 111 71 111 74 62 1 ( 111 74 111 75 62 1 ) 111 75 111 76 62 1 ) 111 76 111 77 18446744073709551615 1 ) 111 77 111 78 18446744073709551615 4 cout 112 29 112 33 56 2 << 112 34 112 36 57 4 king 112 37 112 41 61 2 -> 112 41 112 43 8 12 color_string 112 43 112 55 8 1 ( 112 55 112 56 8 1 ) 112 56 112 57 8 2 << 112 58 112 60 57 16 " lost the game" 112 61 112 77 18446744073709551615 2 << 112 78 112 80 58 4 endl 112 81 112 85 59 1 ; 112 85 112 86 18446744073709551615 1 } 113 21 113 22 18446744073709551615 4 else 113 23 113 27 18446744073709551615 1 { 113 28 113 29 18446744073709551615 76 // piece in the from square has the same color as the piece in the to square 114 25 114 101 18446744073709551615 4 cout 115 25 115 29 56 2 << 115 30 115 32 57 15 "can not move " 115 33 115 48 18446744073709551615 2 << 115 49 115 51 57 10 piece_from 115 52 115 62 53 2 -> 115 62 115 64 55 4 type 115 64 115 68 10 1 ( 115 68 115 69 10 1 ) 115 69 115 70 10 2 << 115 71 115 73 57 8 " from " 115 74 115 82 18446744073709551615 2 << 115 83 115 85 57 4 from 115 86 115 90 44 2 << 115 91 115 93 57 6 " to " 115 94 115 100 18446744073709551615 2 << 115 101 115 103 57 2 to 115 104 115 106 45 2 << 115 107 115 109 58 4 endl 115 110 115 114 59 1 ; 115 114 115 115 18446744073709551615 6 return 116 25 116 31 18446744073709551615 5 false 116 32 116 37 18446744073709551615 1 ; 116 37 116 38 18446744073709551615 1 } 117 21 117 22 18446744073709551615 1 } 118 17 118 18 18446744073709551615 8 piece_to 119 17 119 25 60 1 = 119 26 119 27 63 4 move 119 28 119 32 64 1 ( 119 32 119 33 64 10 piece_from 119 33 119 43 53 1 ) 119 43 119 44 64 1 ; 119 44 119 45 18446744073709551615 6 return 120 17 120 23 18446744073709551615 4 true 120 24 120 28 18446744073709551615 1 ; 120 28 120 29 18446744073709551615 1 } 121 13 121 14 18446744073709551615 4 else 121 15 121 19 18446744073709551615 1 { 121 20 121 21 18446744073709551615 4 cout 122 17 122 21 56 2 << 122 22 122 24 57 15 "can not move " 122 25 122 40 18446744073709551615 2 << 122 41 122 43 57 10 piece_from 122 44 122 54 53 2 -> 122 54 122 56 55 4 type 122 56 122 60 10 1 ( 122 60 122 61 10 1 ) 122 61 122 62 10 2 << 122 63 122 65 57 8 " from " 122 66 122 74 18446744073709551615 2 << 122 75 122 77 57 4 from 122 78 122 82 44 2 << 122 83 122 85 57 6 " to " 122 86 122 92 18446744073709551615 2 << 122 93 122 95 57 2 to 122 96 122 98 45 2 << 122 99 122 101 58 4 endl 122 102 122 106 59 1 ; 122 106 122 107 18446744073709551615 6 return 123 17 123 23 18446744073709551615 5 false 123 24 123 29 18446744073709551615 1 ; 123 29 123 30 18446744073709551615 1 } 124 13 124 14 18446744073709551615 1 } 125 9 125 10 18446744073709551615 4 else 125 11 125 15 18446744073709551615 1 { 125 16 125 17 18446744073709551615 4 cout 126 13 126 17 56 2 << 126 18 126 20 57 14 "no piece at " 126 21 126 35 18446744073709551615 2 << 126 36 126 38 57 4 from 126 39 126 43 44 2 << 126 44 126 46 58 4 endl 126 47 126 51 59 1 ; 126 51 126 52 18446744073709551615 6 return 127 13 127 19 18446744073709551615 5 false 127 20 127 25 18446744073709551615 1 ; 127 25 127 26 18446744073709551615 1 } 128 9 128 10 18446744073709551615 1 } 129 5 129 6 18446744073709551615 6 friend 130 5 130 11 18446744073709551615 7 ostream 130 12 130 19 65 1 & 130 20 130 21 66 8 operator 130 21 130 29 66 2 << 130 29 130 31 66 1 ( 130 31 130 32 66 7 ostream 130 32 130 39 65 1 & 130 40 130 41 18446744073709551615 2 os 130 41 130 43 67 1 , 130 43 130 44 66 5 const 130 45 130 50 18446744073709551615 10 ChessBoard 130 51 130 61 1 1 & 130 62 130 63 18446744073709551615 11 chess_board 130 63 130 74 68 1 ) 130 74 130 75 66 1 { 130 76 130 77 18446744073709551615 3 for 131 9 131 12 18446744073709551615 1 ( 131 13 131 14 18446744073709551615 3 int 131 14 131 17 18446744073709551615 3 row 131 18 131 21 69 1 = 131 22 131 23 18446744073709551615 1 7 131 24 131 25 18446744073709551615 1 ; 131 25 131 26 18446744073709551615 3 row 131 27 131 30 69 2 >= 131 31 131 33 18446744073709551615 1 0 131 34 131 35 18446744073709551615 1 ; 131 35 131 36 18446744073709551615 3 row 131 37 131 40 69 2 -- 131 40 131 42 18446744073709551615 1 ) 131 42 131 43 18446744073709551615 1 { 131 44 131 45 18446744073709551615 2 os 132 13 132 15 67 2 << 132 16 132 18 57 9 to_string 132 19 132 28 70 1 ( 132 28 132 29 70 3 row 132 29 132 32 69 1 + 132 33 132 34 18446744073709551615 1 1 132 35 132 36 18446744073709551615 1 ) 132 36 132 37 70 2 << 132 38 132 40 57 3 " " 132 41 132 44 18446744073709551615 1 ; 132 44 132 45 18446744073709551615 3 for 133 13 133 16 18446744073709551615 1 ( 133 17 133 18 18446744073709551615 3 int 133 18 133 21 18446744073709551615 3 col 133 22 133 25 71 1 = 133 26 133 27 18446744073709551615 1 0 133 28 133 29 18446744073709551615 1 ; 133 29 133 30 18446744073709551615 3 col 133 31 133 34 71 1 < 133 35 133 36 18446744073709551615 1 8 133 37 133 38 18446744073709551615 1 ; 133 38 133 39 18446744073709551615 3 col 133 40 133 43 71 2 ++ 133 43 133 45 18446744073709551615 1 ) 133 45 133 46 18446744073709551615 1 { 133 47 133 48 18446744073709551615 4 auto 134 17 134 21 18446744073709551615 1 & 134 22 134 23 18446744073709551615 5 piece 134 23 134 28 72 1 = 134 29 134 30 18446744073709551615 11 chess_board 134 31 134 42 68 1 . 134 42 134 43 18446744073709551615 7 squares 134 43 134 50 37 1 [ 134 50 134 51 54 3 col 134 51 134 54 71 1 ] 134 54 134 55 54 1 [ 134 55 134 56 54 3 row 134 56 134 59 69 1 ] 134 59 134 60 54 1 ; 134 60 134 61 18446744073709551615 2 os 135 17 135 19 67 2 << 135 20 135 22 57 1 ( 135 23 135 24 18446744073709551615 5 piece 135 24 135 29 72 1 ? 135 30 135 31 18446744073709551615 5 piece 135 32 135 37 72 2 -> 135 37 135 39 55 9 text_desc 135 39 135 48 16 1 ( 135 48 135 49 16 1 ) 135 49 135 50 16 1 + 135 51 135 52 20 3 " " 135 53 135 56 18446744073709551615 1 : 135 57 135 58 18446744073709551615 4 "- " 135 59 135 63 18446744073709551615 1 ) 135 63 135 64 18446744073709551615 1 ; 135 64 135 65 18446744073709551615 1 } 136 13 136 14 18446744073709551615 2 os 137 13 137 15 67 2 << 137 16 137 18 57 4 "\n" 137 19 137 23 18446744073709551615 1 ; 137 23 137 24 18446744073709551615 1 } 138 9 138 10 18446744073709551615 2 os 139 9 139 11 67 2 << 139 12 139 14 57 17 "a b c d e f g h" 139 15 139 32 18446744073709551615 1 ; 139 32 139 33 18446744073709551615 6 return 140 9 140 15 18446744073709551615 2 os 140 16 140 18 67 1 ; 140 18 140 19 18446744073709551615 1 } 141 5 141 6 18446744073709551615 1 } 142 1 142 2 18446744073709551615 1 ; 142 2 142 3 18446744073709551615 3 int 144 1 144 4 18446744073709551615 4 main 144 5 144 9 73 1 ( 144 9 144 10 73 1 ) 144 10 144 11 73 1 { 144 12 144 13 18446744073709551615 10 ChessBoard 145 5 145 15 1 5 board 145 16 145 21 74 1 ; 145 21 145 22 18446744073709551615 5 board 147 5 147 10 74 1 . 147 10 147 11 18446744073709551615 7 squares 147 11 147 18 37 1 [ 147 18 147 19 54 1 4 147 19 147 20 18446744073709551615 1 ] 147 20 147 21 54 1 [ 147 21 147 22 54 1 0 147 22 147 23 18446744073709551615 1 ] 147 23 147 24 54 1 = 147 25 147 26 63 11 make_unique 147 27 147 38 75 1 < 147 38 147 39 75 10 ChessBoard 147 39 147 49 1 2 :: 147 49 147 51 75 4 King 147 51 147 55 17 1 > 147 55 147 56 75 1 ( 147 56 147 57 75 10 ChessBoard 147 57 147 67 1 2 :: 147 67 147 69 18446744073709551615 5 Color 147 69 147 74 2 2 :: 147 74 147 76 18446744073709551615 5 WHITE 147 76 147 81 3 1 ) 147 81 147 82 75 1 ; 147 82 147 83 18446744073709551615 5 board 148 5 148 10 74 1 . 148 10 148 11 18446744073709551615 7 squares 148 11 148 18 37 1 [ 148 18 148 19 54 1 1 148 19 148 20 18446744073709551615 1 ] 148 20 148 21 54 1 [ 148 21 148 22 54 1 0 148 22 148 23 18446744073709551615 1 ] 148 23 148 24 54 1 = 148 25 148 26 63 11 make_unique 148 27 148 38 75 1 < 148 38 148 39 75 10 ChessBoard 148 39 148 49 1 2 :: 148 49 148 51 75 6 Knight 148 51 148 57 28 1 > 148 57 148 58 75 1 ( 148 58 148 59 75 10 ChessBoard 148 59 148 69 1 2 :: 148 69 148 71 18446744073709551615 5 Color 148 71 148 76 2 2 :: 148 76 148 78 18446744073709551615 5 WHITE 148 78 148 83 3 1 ) 148 83 148 84 75 1 ; 148 84 148 85 18446744073709551615 5 board 149 5 149 10 74 1 . 149 10 149 11 18446744073709551615 7 squares 149 11 149 18 37 1 [ 149 18 149 19 54 1 6 149 19 149 20 18446744073709551615 1 ] 149 20 149 21 54 1 [ 149 21 149 22 54 1 0 149 22 149 23 18446744073709551615 1 ] 149 23 149 24 54 1 = 149 25 149 26 63 11 make_unique 149 27 149 38 75 1 < 149 38 149 39 75 10 ChessBoard 149 39 149 49 1 2 :: 149 49 149 51 75 6 Knight 149 51 149 57 28 1 > 149 57 149 58 75 1 ( 149 58 149 59 75 10 ChessBoard 149 59 149 69 1 2 :: 149 69 149 71 18446744073709551615 5 Color 149 71 149 76 2 2 :: 149 76 149 78 18446744073709551615 5 WHITE 149 78 149 83 3 1 ) 149 83 149 84 75 1 ; 149 84 149 85 18446744073709551615 5 board 151 5 151 10 74 1 . 151 10 151 11 18446744073709551615 7 squares 151 11 151 18 37 1 [ 151 18 151 19 54 1 4 151 19 151 20 18446744073709551615 1 ] 151 20 151 21 54 1 [ 151 21 151 22 54 1 7 151 22 151 23 18446744073709551615 1 ] 151 23 151 24 54 1 = 151 25 151 26 63 11 make_unique 151 27 151 38 75 1 < 151 38 151 39 75 10 ChessBoard 151 39 151 49 1 2 :: 151 49 151 51 75 4 King 151 51 151 55 17 1 > 151 55 151 56 75 1 ( 151 56 151 57 75 10 ChessBoard 151 57 151 67 1 2 :: 151 67 151 69 18446744073709551615 5 Color 151 69 151 74 2 2 :: 151 74 151 76 18446744073709551615 5 BLACK 151 76 151 81 4 1 ) 151 81 151 82 75 1 ; 151 82 151 83 18446744073709551615 5 board 152 5 152 10 74 1 . 152 10 152 11 18446744073709551615 7 squares 152 11 152 18 37 1 [ 152 18 152 19 54 1 1 152 19 152 20 18446744073709551615 1 ] 152 20 152 21 54 1 [ 152 21 152 22 54 1 7 152 22 152 23 18446744073709551615 1 ] 152 23 152 24 54 1 = 152 25 152 26 63 11 make_unique 152 27 152 38 75 1 < 152 38 152 39 75 10 ChessBoard 152 39 152 49 1 2 :: 152 49 152 51 75 6 Knight 152 51 152 57 28 1 > 152 57 152 58 75 1 ( 152 58 152 59 75 10 ChessBoard 152 59 152 69 1 2 :: 152 69 152 71 18446744073709551615 5 Color 152 71 152 76 2 2 :: 152 76 152 78 18446744073709551615 5 BLACK 152 78 152 83 4 1 ) 152 83 152 84 75 1 ; 152 84 152 85 18446744073709551615 5 board 153 5 153 10 74 1 . 153 10 153 11 18446744073709551615 7 squares 153 11 153 18 37 1 [ 153 18 153 19 54 1 6 153 19 153 20 18446744073709551615 1 ] 153 20 153 21 54 1 [ 153 21 153 22 54 1 7 153 22 153 23 18446744073709551615 1 ] 153 23 153 24 54 1 = 153 25 153 26 63 11 make_unique 153 27 153 38 75 1 < 153 38 153 39 75 10 ChessBoard 153 39 153 49 1 2 :: 153 49 153 51 75 6 Knight 153 51 153 57 28 1 > 153 57 153 58 75 1 ( 153 58 153 59 75 10 ChessBoard 153 59 153 69 1 2 :: 153 69 153 71 18446744073709551615 5 Color 153 71 153 76 2 2 :: 153 76 153 78 18446744073709551615 5 BLACK 153 78 153 83 4 1 ) 153 83 153 84 75 1 ; 153 84 153 85 18446744073709551615 4 cout 155 5 155 9 56 2 << 155 10 155 12 57 16 "Invalid moves:" 155 13 155 29 18446744073709551615 2 << 155 30 155 32 58 4 endl 155 33 155 37 59 1 ; 155 37 155 38 18446744073709551615 5 board 156 5 156 10 74 1 . 156 10 156 11 43 10 move_piece 156 11 156 21 43 1 ( 156 21 156 22 43 4 "e3" 156 22 156 26 18446744073709551615 1 , 156 26 156 27 43 4 "e2" 156 28 156 32 18446744073709551615 1 ) 156 32 156 33 43 1 ; 156 33 156 34 18446744073709551615 5 board 157 5 157 10 74 1 . 157 10 157 11 43 10 move_piece 157 11 157 21 43 1 ( 157 21 157 22 43 4 "e1" 157 22 157 26 18446744073709551615 1 , 157 26 157 27 43 4 "e3" 157 28 157 32 18446744073709551615 1 ) 157 32 157 33 43 1 ; 157 33 157 34 18446744073709551615 5 board 158 5 158 10 74 1 . 158 10 158 11 43 10 move_piece 158 11 158 21 43 1 ( 158 21 158 22 43 4 "b1" 158 22 158 26 18446744073709551615 1 , 158 26 158 27 43 4 "b2" 158 28 158 32 18446744073709551615 1 ) 158 32 158 33 43 1 ; 158 33 158 34 18446744073709551615 4 cout 159 5 159 9 56 2 << 159 10 159 12 58 4 endl 159 13 159 17 59 1 ; 159 17 159 18 18446744073709551615 4 cout 161 5 161 9 56 2 << 161 10 161 12 57 19 "A simulated game:" 161 13 161 32 18446744073709551615 2 << 161 33 161 35 58 4 endl 161 36 161 40 59 1 ; 161 40 161 41 18446744073709551615 4 cout 162 5 162 9 56 2 << 162 10 162 12 66 5 board 162 13 162 18 74 2 << 162 19 162 21 58 4 endl 162 22 162 26 59 1 ; 162 26 162 27 18446744073709551615 5 board 163 5 163 10 74 1 . 163 10 163 11 43 10 move_piece 163 11 163 21 43 1 ( 163 21 163 22 43 4 "e1" 163 22 163 26 18446744073709551615 1 , 163 26 163 27 43 4 "e2" 163 28 163 32 18446744073709551615 1 ) 163 32 163 33 43 1 ; 163 33 163 34 18446744073709551615 4 cout 164 5 164 9 56 2 << 164 10 164 12 66 5 board 164 13 164 18 74 2 << 164 19 164 21 58 4 endl 164 22 164 26 59 1 ; 164 26 164 27 18446744073709551615 5 board 165 5 165 10 74 1 . 165 10 165 11 43 10 move_piece 165 11 165 21 43 1 ( 165 21 165 22 43 4 "g8" 165 22 165 26 18446744073709551615 1 , 165 26 165 27 43 4 "h6" 165 28 165 32 18446744073709551615 1 ) 165 32 165 33 43 1 ; 165 33 165 34 18446744073709551615 4 cout 166 5 166 9 56 2 << 166 10 166 12 66 5 board 166 13 166 18 74 2 << 166 19 166 21 58 4 endl 166 22 166 26 59 1 ; 166 26 166 27 18446744073709551615 5 board 167 5 167 10 74 1 . 167 10 167 11 43 10 move_piece 167 11 167 21 43 1 ( 167 21 167 22 43 4 "b1" 167 22 167 26 18446744073709551615 1 , 167 26 167 27 43 4 "c3" 167 28 167 32 18446744073709551615 1 ) 167 32 167 33 43 1 ; 167 33 167 34 18446744073709551615 4 cout 168 5 168 9 56 2 << 168 10 168 12 66 5 board 168 13 168 18 74 2 << 168 19 168 21 58 4 endl 168 22 168 26 59 1 ; 168 26 168 27 18446744073709551615 5 board 169 5 169 10 74 1 . 169 10 169 11 43 10 move_piece 169 11 169 21 43 1 ( 169 21 169 22 43 4 "h6" 169 22 169 26 18446744073709551615 1 , 169 26 169 27 43 4 "g8" 169 28 169 32 18446744073709551615 1 ) 169 32 169 33 43 1 ; 169 33 169 34 18446744073709551615 4 cout 170 5 170 9 56 2 << 170 10 170 12 66 5 board 170 13 170 18 74 2 << 170 19 170 21 58 4 endl 170 22 170 26 59 1 ; 170 26 170 27 18446744073709551615 5 board 171 5 171 10 74 1 . 171 10 171 11 43 10 move_piece 171 11 171 21 43 1 ( 171 21 171 22 43 4 "c3" 171 22 171 26 18446744073709551615 1 , 171 26 171 27 43 4 "d5" 171 28 171 32 18446744073709551615 1 ) 171 32 171 33 43 1 ; 171 33 171 34 18446744073709551615 4 cout 172 5 172 9 56 2 << 172 10 172 12 66 5 board 172 13 172 18 74 2 << 172 19 172 21 58 4 endl 172 22 172 26 59 1 ; 172 26 172 27 18446744073709551615 5 board 173 5 173 10 74 1 . 173 10 173 11 43 10 move_piece 173 11 173 21 43 1 ( 173 21 173 22 43 4 "g8" 173 22 173 26 18446744073709551615 1 , 173 26 173 27 43 4 "h6" 173 28 173 32 18446744073709551615 1 ) 173 32 173 33 43 1 ; 173 33 173 34 18446744073709551615 4 cout 174 5 174 9 56 2 << 174 10 174 12 66 5 board 174 13 174 18 74 2 << 174 19 174 21 58 4 endl 174 22 174 26 59 1 ; 174 26 174 27 18446744073709551615 5 board 175 5 175 10 74 1 . 175 10 175 11 43 10 move_piece 175 11 175 21 43 1 ( 175 21 175 22 43 4 "d5" 175 22 175 26 18446744073709551615 1 , 175 26 175 27 43 4 "f6" 175 28 175 32 18446744073709551615 1 ) 175 32 175 33 43 1 ; 175 33 175 34 18446744073709551615 4 cout 176 5 176 9 56 2 << 176 10 176 12 66 5 board 176 13 176 18 74 2 << 176 19 176 21 58 4 endl 176 22 176 26 59 1 ; 176 26 176 27 18446744073709551615 5 board 177 5 177 10 74 1 . 177 10 177 11 43 10 move_piece 177 11 177 21 43 1 ( 177 21 177 22 43 4 "h6" 177 22 177 26 18446744073709551615 1 , 177 26 177 27 43 4 "g8" 177 28 177 32 18446744073709551615 1 ) 177 32 177 33 43 1 ; 177 33 177 34 18446744073709551615 4 cout 178 5 178 9 56 2 << 178 10 178 12 66 5 board 178 13 178 18 74 2 << 178 19 178 21 58 4 endl 178 22 178 26 59 1 ; 178 26 178 27 18446744073709551615 5 board 179 5 179 10 74 1 . 179 10 179 11 43 10 move_piece 179 11 179 21 43 1 ( 179 21 179 22 43 4 "f6" 179 22 179 26 18446744073709551615 1 , 179 26 179 27 43 4 "e8" 179 28 179 32 18446744073709551615 1 ) 179 32 179 33 43 1 ; 179 33 179 34 18446744073709551615 1 } 180 1 180 2 18446744073709551615 0 0 76 0 0 0 22 0 0 1 2 0 3 std 4 1 2 0 10 ChessBoard 5 1 2 0 16 Color:ChessBoard 7 1 2 0 22 WHITE:Color:ChessBoard 7 1 2 0 22 BLACK:Color:ChessBoard 4 1 2 0 16 Piece:ChessBoard 10 1 2 0 82 15:21:/Users/marcusjohannessen/Desktop/NTNU/Høst 2022/C++/Obliger/oblig6/main.cpp 6 1 2 0 22 color:Piece:ChessBoard 21 1 2 0 29 color_string:Piece:ChessBoard 20 1 2 0 14 string:__1:std 21 1 2 0 21 type:Piece:ChessBoard 21 1 2 0 27 valid_move:Piece:ChessBoard 10 1 2 0 82 30:37:/Users/marcusjohannessen/Desktop/NTNU/Høst 2022/C++/Obliger/oblig6/main.cpp 10 1 2 0 82 30:49:/Users/marcusjohannessen/Desktop/NTNU/Høst 2022/C++/Obliger/oblig6/main.cpp 10 1 2 0 82 30:61:/Users/marcusjohannessen/Desktop/NTNU/Høst 2022/C++/Obliger/oblig6/main.cpp 10 1 2 0 82 30:71:/Users/marcusjohannessen/Desktop/NTNU/Høst 2022/C++/Obliger/oblig6/main.cpp 21 1 2 0 26 text_desc:Piece:ChessBoard 4 1 2 0 15 King:ChessBoard 10 1 2 0 82 38:24:/Users/marcusjohannessen/Desktop/NTNU/Høst 2022/C++/Obliger/oblig6/main.cpp 9 1 2 0 82 40:20:/Users/marcusjohannessen/Desktop/NTNU/Høst 2022/C++/Obliger/oblig6/main.cpp 8 1 2 0 17 operator+:__1:std 10 1 2 0 82 44:34:/Users/marcusjohannessen/Desktop/NTNU/Høst 2022/C++/Obliger/oblig6/main.cpp 10 1 2 0 82 44:46:/Users/marcusjohannessen/Desktop/NTNU/Høst 2022/C++/Obliger/oblig6/main.cpp 10 1 2 0 82 44:58:/Users/marcusjohannessen/Desktop/NTNU/Høst 2022/C++/Obliger/oblig6/main.cpp 10 1 2 0 82 44:68:/Users/marcusjohannessen/Desktop/NTNU/Høst 2022/C++/Obliger/oblig6/main.cpp 9 1 2 0 82 45:21:/Users/marcusjohannessen/Desktop/NTNU/Høst 2022/C++/Obliger/oblig6/main.cpp 8 1 2 0 3 abs 9 1 2 0 82 46:21:/Users/marcusjohannessen/Desktop/NTNU/Høst 2022/C++/Obliger/oblig6/main.cpp 4 1 2 0 17 Knight:ChessBoard 10 1 2 0 82 61:26:/Users/marcusjohannessen/Desktop/NTNU/Høst 2022/C++/Obliger/oblig6/main.cpp 9 1 2 0 82 64:20:/Users/marcusjohannessen/Desktop/NTNU/Høst 2022/C++/Obliger/oblig6/main.cpp 10 1 2 0 82 68:34:/Users/marcusjohannessen/Desktop/NTNU/Høst 2022/C++/Obliger/oblig6/main.cpp 10 1 2 0 82 68:46:/Users/marcusjohannessen/Desktop/NTNU/Høst 2022/C++/Obliger/oblig6/main.cpp 10 1 2 0 82 68:58:/Users/marcusjohannessen/Desktop/NTNU/Høst 2022/C++/Obliger/oblig6/main.cpp 10 1 2 0 82 68:68:/Users/marcusjohannessen/Desktop/NTNU/Høst 2022/C++/Obliger/oblig6/main.cpp 9 1 2 0 82 69:21:/Users/marcusjohannessen/Desktop/NTNU/Høst 2022/C++/Obliger/oblig6/main.cpp 9 1 2 0 82 70:21:/Users/marcusjohannessen/Desktop/NTNU/Høst 2022/C++/Obliger/oblig6/main.cpp 6 1 2 0 18 squares:ChessBoard 21 1 2 0 21 resize:vector:__1:std 9 1 2 0 82 86:20:/Users/marcusjohannessen/Desktop/NTNU/Høst 2022/C++/Obliger/oblig6/main.cpp 21 1 2 0 29 operator*:__wrap_iter:__1:std 31 1 2 0 14 vector:__1:std 31 1 2 0 18 unique_ptr:__1:std 21 1 2 0 21 move_piece:ChessBoard 10 1 2 0 82 95:40:/Users/marcusjohannessen/Desktop/NTNU/Høst 2022/C++/Obliger/oblig6/main.cpp 10 1 2 0 82 95:65:/Users/marcusjohannessen/Desktop/NTNU/Høst 2022/C++/Obliger/oblig6/main.cpp 9 1 2 0 82 96:13:/Users/marcusjohannessen/Desktop/NTNU/Høst 2022/C++/Obliger/oblig6/main.cpp 21 1 2 0 31 operator[]:basic_string:__1:std 9 1 2 0 82 97:13:/Users/marcusjohannessen/Desktop/NTNU/Høst 2022/C++/Obliger/oblig6/main.cpp 8 1 2 0 12 stoi:__1:std 24 1 2 0 20 basic_string:__1:std 9 1 2 0 82 98:13:/Users/marcusjohannessen/Desktop/NTNU/Høst 2022/C++/Obliger/oblig6/main.cpp 9 1 2 0 82 99:13:/Users/marcusjohannessen/Desktop/NTNU/Høst 2022/C++/Obliger/oblig6/main.cpp 9 1 2 0 83 103:15:/Users/marcusjohannessen/Desktop/NTNU/Høst 2022/C++/Obliger/oblig6/main.cpp 21 1 2 0 25 operator[]:vector:__1:std 21 1 2 0 29 operator->:unique_ptr:__1:std 9 1 2 0 12 cout:__1:std 8 1 2 0 16 operator:__1:std 21 1 2 0 30 operator:basic_ostream:__1:std 8 1 2 0 12 endl:__1:std 9 1 2 0 83 107:23:/Users/marcusjohannessen/Desktop/NTNU/Høst 2022/C++/Obliger/oblig6/main.cpp 9 1 2 0 83 111:34:/Users/marcusjohannessen/Desktop/NTNU/Høst 2022/C++/Obliger/oblig6/main.cpp 21 1 2 0 22 get:unique_ptr:__1:std 21 1 2 0 28 operator=:unique_ptr:__1:std 8 1 2 0 12 move:__1:std 20 1 2 0 15 ostream:__1:std 8 1 2 0 8 operator 10 1 2 0 83 130:41:/Users/marcusjohannessen/Desktop/NTNU/Høst 2022/C++/Obliger/oblig6/main.cpp 10 1 2 0 83 130:63:/Users/marcusjohannessen/Desktop/NTNU/Høst 2022/C++/Obliger/oblig6/main.cpp 9 1 2 0 83 131:18:/Users/marcusjohannessen/Desktop/NTNU/Høst 2022/C++/Obliger/oblig6/main.cpp 8 1 2 0 17 to_string:__1:std 9 1 2 0 83 133:22:/Users/marcusjohannessen/Desktop/NTNU/Høst 2022/C++/Obliger/oblig6/main.cpp 9 1 2 0 83 134:23:/Users/marcusjohannessen/Desktop/NTNU/Høst 2022/C++/Obliger/oblig6/main.cpp 8 1 2 0 4 main 9 1 2 0 83 145:16:/Users/marcusjohannessen/Desktop/NTNU/Høst 2022/C++/Obliger/oblig6/main.cpp 8 1 2 0 19 make_unique:__1:std 0 0 1 0 0 0 76 /Users/marcusjohannessen/Desktop/NTNU/Høst 2022/C++/Obliger/oblig6/main.cpp 1664988873